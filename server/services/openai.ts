import OpenAI from "openai";
import type { ExamResult, User, Exam } from "@shared/schema";
import type { HealthMetric } from "@shared/schema";
import type { IStorage } from "../storage";
import logger from "../logger";

// Default GPT-5 vision model can be overridden through environment variables
const OPENAI_MODEL = process.env.OPENAI_GPT5_MODEL || process.env.OPENAI_ANALYSIS_MODEL || "gpt-4.1";
const OPENAI_FALLBACK_MODEL = process.env.OPENAI_FALLBACK_MODEL || "gpt-4o";
const OPENAI_MAX_OUTPUT_TOKENS = Number(process.env.OPENAI_ANALYSIS_MAX_OUTPUT_TOKENS || "4000");

// Initialize OpenAI using the API key from environment variables
let openai: OpenAI | null = null;

if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({ 
    apiKey: process.env.OPENAI_API_KEY
  });
} else {
  // OpenAI API key not found. OpenAI features will use fallback responses.
}

export async function generateHealthInsights(examResult: ExamResult, patientData?: any) {
  try {
    
    // Prepare patient context if available
    let patientContext = "";
    if (patientData) {
      patientContext = `
      Dados do paciente:
      - Sexo: ${patientData.gender || 'N√£o informado'}
      - Idade: ${patientData.age || 'N√£o informada'}
      - Doen√ßas preexistentes: ${patientData.diseases?.join(", ") || 'Nenhuma informada'}
      - Cirurgias pr√©vias: ${patientData.surgeries?.join(", ") || 'Nenhuma informada'}
      - Alergias: ${patientData.allergies?.join(", ") || 'Nenhuma informada'}
      - Hist√≥rico familiar: ${patientData.familyHistory || 'N√£o informado'}
      `;
    }
    
    // Prompt aprimorado para OpenAI com an√°lise hol√≠stica e personalizada
    const prompt = `
      Voc√™ √© um especialista m√©dico altamente qualificado em medicina laboratorial, diagn√≥stico cl√≠nico e medicina preventiva.
      Sua an√°lise integra as evid√™ncias cient√≠ficas mais atualizadas (2024) com diretrizes m√©dicas internacionais e abordagem de medicina personalizada.
      
      ### TAREFA PRINCIPAL:
      Analise detalhadamente os seguintes resultados de exames m√©dicos e forne√ßa uma avalia√ß√£o m√©dica completa, 
      integrando os dados laboratoriais com o contexto espec√≠fico do paciente para uma an√°lise verdadeiramente personalizada.
      
      ### DADOS DO PACIENTE:
      ${patientContext}
      
      ### DADOS DO EXAME:
      - Resumo: ${examResult.summary}
      - An√°lise detalhada: ${examResult.detailedAnalysis}
      - Recomenda√ß√µes preliminares: ${examResult.recommendations}
      - M√©dico solicitante: ${'N√£o informado'}
      - Laborat√≥rio: ${'N√£o informado'}
      - Data do exame: ${'N√£o informada'}
      
      ### M√âTRICAS DE SA√öDE DETALHADAS:
      ${JSON.stringify(examResult.healthMetrics, null, 2)}
      
      ### INSTRU√á√ïES ESPEC√çFICAS:
      1. Fa√ßa correla√ß√µes entre diferentes marcadores/par√¢metros e integre-os no contexto do perfil do paciente
      2. Identifique padr√µes que possam indicar condi√ß√µes subcl√≠nicas ou riscos emergentes
      3. Priorize a detec√ß√£o de fatores de risco modific√°veis atrav√©s de mudan√ßas no estilo de vida
      4. Forne√ßa uma an√°lise de tend√™ncias temporais quando houver dados hist√≥ricos dispon√≠veis
      5. Sugira monitoramento personalizado baseado no perfil de risco espec√≠fico
      
      ### DIRETRIZES LEGAIS E √âTICAS OBRIGAT√ìRIAS (MINIST√âRIO DA SA√öDE):
      ‚ö†Ô∏è ALERTA LEGAL: √â CRIME prescrever ou recomendar medicamentos, vitaminas, suplementos
      üö´ TOTALMENTE PROIBIDO mencionar: vitamina D, B12, C, zinco, magn√©sio, ferro, c√°lcio, √¥mega 3, qualquer nutriente espec√≠fico
      ‚úÖ APENAS use estas frases EXATAS:
      - "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de"
      - "Pratique atividade f√≠sica regular conforme orienta√ß√µes do Minist√©rio da Sa√∫de (150 min/semana)"
      - "Consulte um m√©dico para orienta√ß√µes espec√≠ficas"
      üö´ JAMAIS sugira: suplementos, vitaminas, minerais, nutrientes espec√≠ficos, exposi√ß√£o solar
      üìã SIGA EXCLUSIVAMENTE as diretrizes do SUS e Minist√©rio da Sa√∫de
      
      ### RESPONDA ESTRITAMENTE NO SEGUINTE FORMATO JSON:
      {
        "contextualAnalysis": "An√°lise hol√≠stica detalhada (250-350 palavras) integrando todos os marcadores relevantes com o contexto do paciente, perfil de risco individual e fatores demogr√°ficos. Destaque correla√ß√µes entre diferentes par√¢metros e suas implica√ß√µes cl√≠nicas.",
        
        "possibleDiagnoses": [
          {
            "condition": "Nome preciso da condi√ß√£o m√©dica potencial",
            "probability": "alta/m√©dia/baixa (baseado na correla√ß√£o espec√≠fica dos marcadores)",
            "description": "Descri√ß√£o concisa da condi√ß√£o com foco no mecanismo fisiopatol√≥gico relevante para este paciente",
            "indicativeMarkers": ["Lista precisa de marcadores espec√≠ficos que sugerem esta condi√ß√£o", "Com valores exatos e status (alto/baixo)"]
          }
        ],
        
        "recommendations": [
          "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de",
          "Pratique atividade f√≠sica regular conforme orienta√ß√µes do Minist√©rio da Sa√∫de (150 min/semana)",
          "Consulte um m√©dico para orienta√ß√µes espec√≠ficas sobre os resultados",
          "Mantenha sono adequado de 7-8 horas por noite",
          "Realize acompanhamento m√©dico regular conforme orienta√ß√£o profissional"
        ],
        
        "specialists": [
          "Especialista 1: especialidade m√©dica com justificativa espec√≠fica baseada nos achados",
          "Especialista 2: especialidade m√©dica com prioridade sugerida (urgente/rotina)",
          "Especialista 3: especialidade m√©dica com foco preventivo baseado no perfil de risco"
        ],
        
        "lifestyle": {
          "diet": "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de, priorizando alimentos in natura e minimamente processados",
          "exercise": "Pratique atividade f√≠sica regular conforme orienta√ß√µes do Minist√©rio da Sa√∫de: 150 minutos de atividade moderada por semana",
          "sleep": "Mantenha sono adequado de 7-8 horas por noite com hor√°rios regulares",
          "stress_management": "Pratique t√©cnicas de relaxamento e consulte profissional de sa√∫de para orienta√ß√µes espec√≠ficas"
        },
        
        "riskFactors": [
          "Fator de risco 1: descri√ß√£o com grau de risco e impacto potencial",
          "Fator de risco 2: estrat√©gias espec√≠ficas de modifica√ß√£o",
          "Fator de risco 3: relev√¢ncia particular baseada no perfil individual",
          "Fator de risco 4: conex√£o com achados laboratoriais espec√≠ficos"
        ],
        
        "healthParameters": {
          "healthScore": "Pontua√ß√£o num√©rica (0-100) com m√©todo de c√°lculo transparente baseado nos principais marcadores",
          "criticalAreas": ["Par√¢metros espec√≠ficos que requerem aten√ß√£o imediata", "Com valores exatos e desvio do ideal"],
          "stableAreas": ["Par√¢metros que est√£o em n√≠veis saud√°veis", "Com valores exatos"],
          "improvementTrends": ["Par√¢metros que mostram melhorias", "Se dados hist√≥ricos dispon√≠veis"],
          "worseningTrends": ["Par√¢metros que mostram deteriora√ß√£o", "Se dados hist√≥ricos dispon√≠veis"]
        },
        
        "evidenceBasedAssessment": {
          "clinicalGuidelines": [
            "Diretriz cl√≠nica 1: refer√™ncia espec√≠fica √† diretriz atual (2023-2024) relacionada aos achados-chave",
            "Diretriz cl√≠nica 2: ponto espec√≠fico da diretriz relevante para este caso"
          ],
          "studyReferences": [
            "Estudo 1: cita√ß√£o em formato cient√≠fico de estudo relevante e recente",
            "Estudo 2: conex√£o espec√≠fica entre o estudo e os achados do paciente",
            "Estudo 3: signific√¢ncia cl√≠nica do estudo para o manejo deste paciente"
          ],
          "confidenceLevel": "alto/m√©dio/baixo com justificativa espec√≠fica baseada na qualidade e completude dos dados"
        }
      }
      
      ### DIRETRIZES CR√çTICAS:
      - Adapte sua an√°lise ao perfil demogr√°fico exato do paciente (idade, sexo, hist√≥rico)
      - Priorize a identifica√ß√£o de condi√ß√µes subcl√≠nicas e fatores de risco modific√°veis
      - Baseie todas as recomenda√ß√µes em evid√™ncias cient√≠ficas s√≥lidas e atualizadas
      - Mantenha um equil√≠brio entre sensibilidade diagn√≥stica e especificidade
      - Evite alarmismo desnecess√°rio, mas n√£o subestime achados potencialmente significativos
      - Considere sempre a integra√ß√£o de m√∫ltiplos marcadores em vez de an√°lise isolada
      - O JSON DEVE ser v√°lido, sem erros de formata√ß√£o ou campos duplicados
    `;
    
    // Check if OpenAI API key is available
    if (!process.env.OPENAI_API_KEY) {
      return getFallbackInsights(patientData);
    }
    
    try {
      // Call the actual OpenAI API
      return await callOpenAIApi(prompt);
    } catch (apiError) {
      return getFallbackInsights(patientData);
    }
  } catch (error) {
    throw new Error("Falha ao gerar insights de sa√∫de com OpenAI");
  }
}

// Function to call the OpenAI API
async function callOpenAIApi(prompt: string) {
  try {
    if (!openai) {
      throw new Error("OpenAI client not initialized");
    }
    
    const response = await openai.chat.completions.create({
      model: OPENAI_MODEL,
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
      max_tokens: OPENAI_MAX_OUTPUT_TOKENS
    });
    
    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("Empty response from OpenAI API");
    }
    
    try {
      // Tentar analisar a resposta como JSON
      return JSON.parse(content);
    } catch (parseError) {
      
      // Se n√£o for um JSON v√°lido, tente extrair um JSON v√°lido do conte√∫do
      try {
        // Tentar localizar um objeto JSON na resposta
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const jsonStr = jsonMatch[0];
          return JSON.parse(jsonStr);
        }
      } catch (extractError) {
        // Failed to extract JSON from response
      }
      
      // Se ainda falhar, retorne um objeto estruturado b√°sico
      return {
        contextualAnalysis: "N√£o foi poss√≠vel analisar a resposta da IA. Por favor, tente novamente.",
        possibleDiagnoses: [],
        recommendations: ["Consulte um m√©dico para uma an√°lise profissional."],
        specialists: ["Cl√≠nico Geral"],
        lifestyle: {
          diet: "Mantenha uma alimenta√ß√£o balanceada.",
          exercise: "Pratique exerc√≠cios regularmente.",
          sleep: "Mantenha um sono de qualidade."
        },
        riskFactors: []
      };
    }
  } catch (error) {
    throw error;
  }
}

// Fallback response if OpenAI API is unavailable
function getFallbackInsights(patientData?: any) {
  
  // Base response com estrutura atualizada conforme novo formato, incluindo diagn√≥sticos poss√≠veis
  const response = {
    possibleDiagnoses: [
      {
        condition: "Altera√ß√£o em exames espec√≠ficos",
        probability: "m√©dia",
        description: "Alguns par√¢metros podem estar alterados - consulte um m√©dico para orienta√ß√µes espec√≠ficas",
        indicativeMarkers: ["Valores fora do intervalo de refer√™ncia", "Necessita avalia√ß√£o m√©dica"]
      },
      {
        condition: "Pr√©-diabetes",
        probability: "baixa",
        description: "N√≠veis de glicose em jejum ligeiramente elevados, indicando potencial risco de diabetes",
        indicativeMarkers: ["Glicemia em jejum entre 100-125 mg/dL", "Hemoglobina glicada (HbA1c) entre 5.7-6.4%"]
      }
    ],
    recommendations: [
      "Consulte um cl√≠nico geral para discutir os resultados dos exames",
      "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de",
      "Pratique atividade f√≠sica regular conforme orienta√ß√µes do Minist√©rio da Sa√∫de (150 min/semana)",
      "Mantenha sono adequado de 7-8 horas por noite",
      "Realize acompanhamento m√©dico regular conforme orienta√ß√£o profissional"
    ],
    specialists: [
      "Nutricionista - para orienta√ß√£o alimentar personalizada",
      "Endocrinologista - para avalia√ß√£o dos n√≠veis de glicemia",
      "Cardiologista - para acompanhamento preventivo"
    ],
    lifestyle: {
      diet: "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de, priorizando alimentos in natura",
      exercise: "Pratique atividade f√≠sica regular conforme orienta√ß√µes do Minist√©rio da Sa√∫de: 150 minutos por semana",
      sleep: "Mantenha sono adequado de 7-8 horas por noite com hor√°rios regulares",
      stress_management: "Pratique t√©cnicas de relaxamento e consulte profissional de sa√∫de para orienta√ß√µes espec√≠ficas"
    },
    riskFactors: [
      "Altera√ß√µes metab√≥licas - consulte m√©dico para avalia√ß√£o espec√≠fica",
      "Par√¢metros fora do intervalo de refer√™ncia - necessita acompanhamento m√©dico",
      "Fatores de risco cardiovascular - siga orienta√ß√µes do Minist√©rio da Sa√∫de"
    ],
    contextualAnalysis: "An√°lise contextual n√£o dispon√≠vel no momento. Consulte um m√©dico para uma avalia√ß√£o personalizada.",
    
    // Novos campos adicionados conforme o formato atualizado
    healthParameters: {
      healthScore: 75,
      criticalAreas: ["Metabolismo da glicose", "N√≠veis de Vitamina D"],
      stableAreas: ["Fun√ß√£o card√≠aca", "Fun√ß√£o renal", "Hemograma b√°sico"],
      improvementTrends: [],
      worseningTrends: []
    },
    evidenceBasedAssessment: {
      clinicalGuidelines: [
        "American Diabetes Association (ADA) - Diretrizes para preven√ß√£o de diabetes 2024",
        "Sociedade Brasileira de Endocrinologia - Protocolo de tratamento para defici√™ncia de Vitamina D"
      ],
      studyReferences: [
        "Journal of Clinical Endocrinology & Metabolism, 2023 - Rela√ß√£o entre vitamina D e imunidade",
        "The Lancet, 2024 - Impacto da atividade f√≠sica regular em biomarcadores metab√≥licos"
      ],
      confidenceLevel: "m√©dio"
    }
  };
  
  // If we have patient data, add some customization to the response
  if (patientData) {
    if (patientData.gender === 'feminino') {
      response.recommendations.push("Considere incluir um exame de densitometria √≥ssea para monitorar a sa√∫de √≥ssea");
      if (patientData.age && patientData.age > 40) {
        response.specialists.push("Ginecologista - para acompanhamento hormonal");
        response.evidenceBasedAssessment.clinicalGuidelines.push(
          "Sociedade Brasileira de Ginecologia - Protocolo de acompanhamento para mulheres acima de 40 anos"
        );
      }
    } else if (patientData.gender === 'masculino') {
      response.recommendations.push("Considere incluir exames de pr√≥stata para monitoramento preventivo");
      if (patientData.age && patientData.age > 45) {
        response.specialists.push("Urologista - para acompanhamento preventivo");
        response.evidenceBasedAssessment.clinicalGuidelines.push(
          "Sociedade Brasileira de Urologia - Diretrizes para rastreamento de c√¢ncer de pr√≥stata 2024"
        );
      }
    }
    
    if (patientData.diseases && patientData.diseases.includes('diabetes')) {
      response.riskFactors.push("Diabetes diagnosticada - necessita monitoramento rigoroso da glicemia (evid√™ncia forte)");
      response.lifestyle.diet = "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de, priorizando alimentos in natura";
      response.healthParameters.criticalAreas.push("Controle glic√™mico rigoroso");
      response.healthParameters.healthScore = 65;
      response.evidenceBasedAssessment.studyReferences.push(
        "The New England Journal of Medicine, 2024 - Estrat√©gias personalizadas para manejo de diabetes tipo 2"
      );
    }
    
    if (patientData.allergies && patientData.allergies.length > 0) {
      response.riskFactors.push(`Alergias a ${patientData.allergies.join(', ')} - considerar em qualquer tratamento (evid√™ncia forte)`);
      response.healthParameters.criticalAreas.push("Manejo de alergias");
    }
    
    response.contextualAnalysis = "An√°lise baseada no perfil do paciente. Os par√¢metros de sa√∫de foram ajustados considerando as condi√ß√µes pr√©-existentes, hist√≥rico e demografia. Recomenda-se consulta m√©dica para avalia√ß√£o completa e individualizada.";
  }
  
  return response;
}

/**
 * Gera um relat√≥rio cronol√≥gico contextual baseado nos exames do paciente ao longo do tempo
 * @param examResults - Lista de resultados de exames em ordem cronol√≥gica
 * @param user - Dados do usu√°rio
 * @returns Relat√≥rio cronol√≥gico com an√°lise de tend√™ncias
 */

/**
 * Analisa exames j√° extra√≠dos previamente usando a OpenAI
 * @param examId ID do exame que j√° possui dados estruturados e est√° pronto para an√°lise
 * @param userId ID do usu√°rio dono do exame
 * @param storage Interface de armazenamento para acessar dados
 * @param patientData Dados adicionais do paciente para contextualiza√ß√£o
 */
export async function analyzeExtractedExam(examId: number, userId: number, storage: IStorage, patientData?: any) {
  try {
    
    // 1. Obter o exame e resultado da extra√ß√£o inicial
    const exam = await storage.getExam(examId);
    if (!exam || exam.userId !== userId) {
      throw new Error("Exame n√£o encontrado ou acesso n√£o autorizado");
    }
    
    if (exam.status !== "ready_for_analysis" && exam.status !== "extracted") {
      throw new Error(`Exame com status inv√°lido para an√°lise: ${exam.status}`);
    }
    
    // 2. Obter resultado da extra√ß√£o pr√©via armazenado no banco
    const extractionResult = await storage.getExamResultByExamId(examId);
    if (!extractionResult) {
      throw new Error("Resultado da extra√ß√£o n√£o encontrado");
    }
    
    // 3. Obter m√©tricas diretamente do resultado da extra√ß√£o, n√£o de health_metrics
    const examDateStr = exam?.examDate ? new Date(exam.examDate).toISOString().split('T')[0] : 
                        exam?.uploadDate ? new Date(exam.uploadDate).toISOString().split('T')[0] : null;
    
    // Usar as m√©tricas que j√° foram extra√≠das e armazenadas em examResults
    // em vez de tentar buscar da tabela health_metrics que est√° incompleta
    let metricsFromThisExam = [];
    
    if (extractionResult.healthMetrics && Array.isArray(extractionResult.healthMetrics)) {
      metricsFromThisExam = extractionResult.healthMetrics;
    } else {
      // Nenhuma m√©trica encontrada no resultado da extra√ß√£o. Usando array vazio.
    }
    
    // 4. Organizar m√©tricas por categoria para uma an√°lise mais estruturada
    const metricsByCategory = new Map();
    metricsFromThisExam.forEach(metric => {
      const category = metric.category || "Geral";
      if (!metricsByCategory.has(category)) {
        metricsByCategory.set(category, []);
      }
      metricsByCategory.get(category).push(metric);
    });
    
    // Prepare patient context if available
    let patientContext = "";
    if (patientData) {
      patientContext = `
      Dados do paciente:
      - Sexo: ${patientData.gender || 'N√£o informado'}
      - Idade: ${patientData.age || 'N√£o informada'}
      - Doen√ßas preexistentes: ${patientData.diseases?.join(", ") || 'Nenhuma informada'}
      - Cirurgias pr√©vias: ${patientData.surgeries?.join(", ") || 'Nenhuma informada'}
      - Alergias: ${patientData.allergies?.join(", ") || 'Nenhuma informada'}
      - Hist√≥rico familiar: ${patientData.familyHistory || 'N√£o informado'}
      `;
    }
    
    // Criar prompt mais estruturado para a OpenAI com base nas categorias de exames
    let metricsDescriptionByCategory = "";
    metricsByCategory.forEach((metrics, category) => {
      metricsDescriptionByCategory += `\n### ${category.toUpperCase()} (${metrics.length} par√¢metros):\n`;
      metrics.forEach((metric: any) => {
        const status = metric.status ? ` (${metric.status.toUpperCase()})` : '';
        const reference = (metric.referenceMin && metric.referenceMax)
          ? ` [Refer√™ncia: ${metric.referenceMin}-${metric.referenceMax} ${metric.unit || ''}]` 
          : '';
        metricsDescriptionByCategory += `- ${metric.name}: ${metric.value} ${metric.unit || ''}${status}${reference}\n`;
        if (metric.clinical_significance) {
          metricsDescriptionByCategory += `  Significado cl√≠nico: ${metric.clinical_significance}\n`;
        }
      });
    });
    
    // 5. Criar prompt para OpenAI com an√°lise hol√≠stica e categorizada
    const prompt = `
      Voc√™ √© um especialista m√©dico altamente qualificado em medicina laboratorial e diagn√≥stico cl√≠nico.
      Agora voc√™ vai realizar uma AN√ÅLISE GLOBAL E HOL√çSTICA dos resultados de exames que j√° foram processados e extra√≠dos previamente.
      
      ### TAREFA PRINCIPAL:
      Analise detalhadamente os seguintes resultados de exames m√©dicos e forne√ßa uma avalia√ß√£o m√©dica integrativa,
      correlacionando os diferentes par√¢metros entre si e com o contexto do paciente quando dispon√≠vel.
      
      ### DADOS DO PACIENTE:
      ${patientContext}
      
      ### DADOS DO EXAME:
      - Nome: ${exam?.name || 'N√£o informado'}
      - Tipo de documento: ${exam?.fileType || 'N√£o informado'}
      - Data do exame: ${examDateStr || 'N√£o informada'}
      - Laborat√≥rio: ${exam?.laboratoryName || 'N√£o informado'}
      - M√©dico solicitante: ${exam?.requestingPhysician ? `Dr. ${exam.requestingPhysician}` : 'N√£o informado'}
      
      ### M√âTRICAS DE SA√öDE ORGANIZADAS POR CATEGORIA:
      ${metricsDescriptionByCategory}
      
      ### INSTRU√á√ïES ESPEC√çFICAS:
      1. INTEGRE todos os resultados em uma an√°lise cl√≠nica compreensiva.
      2. Identifique CORRELA√á√ïES e PADR√ïES entre diferentes marcadores de diferentes categorias.
      3. Destaque ALTERA√á√ïES SIGNIFICATIVAS e explique sua import√¢ncia cl√≠nica.
      4. Considere o CONTEXTO COMPLETO, incluindo exames de diferentes categorias.
      5. Sugira poss√≠veis diagn√≥sticos com diferentes n√≠veis de probabilidade.
      6. Forne√ßa recomenda√ß√µes espec√≠ficas e personalizadas.
      7. Identifique especialidades m√©dicas relevantes para acompanhamento.
      8. Inclua sugest√µes de estilo de vida baseadas nos resultados.
      9. Avalie fatores de risco evidenciados pelos exames.
      10. Calcule um "health score" estimado (0-100) baseado nos resultados.
      
      ### FORMATO DA RESPOSTA (responda EXATAMENTE neste formato JSON):
      {
        "contextualAnalysis": "An√°lise contextualizada dos resultados, integrando diferentes categorias de exames (2-3 par√°grafos)",
        "possibleDiagnoses": [
          {
            "condition": "Nome da poss√≠vel condi√ß√£o",
            "probability": "alta|m√©dia|baixa",
            "description": "Breve descri√ß√£o da condi√ß√£o",
            "indicativeMarkers": ["Marcador 1", "Marcador 2"]
          }
        ],
        "recommendations": [
          "Recomenda√ß√£o espec√≠fica 1",
          "Recomenda√ß√£o espec√≠fica 2"
        ],
        "specialists": [
          "Especialidade m√©dica 1 para acompanhamento",
          "Especialidade m√©dica 2 para acompanhamento"
        ],
        "lifestyle": {
          "diet": "Recomenda√ß√µes nutricionais espec√≠ficas",
          "exercise": "Recomenda√ß√µes de atividade f√≠sica",
          "sleep": "Recomenda√ß√µes sobre sono",
          "stress_management": "Recomenda√ß√µes sobre gest√£o do estresse"
        },
        "riskFactors": [
          "Fator de risco 1 identificado nos resultados",
          "Fator de risco 2 identificado nos resultados"
        ],
        "healthParameters": {
          "healthScore": 85,
          "criticalAreas": ["√Årea 1", "√Årea 2"],
          "stableAreas": ["√Årea 3", "√Årea 4"],
          "improvementTrends": ["Tend√™ncia 1", "Tend√™ncia 2"],
          "worseningTrends": ["Tend√™ncia 3", "Tend√™ncia 4"]
        },
        "evidenceBasedAssessment": {
          "clinicalGuidelines": ["Diretriz 1", "Diretriz 2"],
          "studyReferences": ["Refer√™ncia 1", "Refer√™ncia 2"],
          "confidenceLevel": "Alta|M√©dia|Baixa"
        }
      }
      
      Importante: Respeite RIGOROSAMENTE o formato JSON acima. Sua an√°lise deve ser integrada e hol√≠stica, considerando TODAS as categorias de exames em conjunto.
    `;
    
    // 6. Chamar a API da OpenAI
    const insightsResponse = await callOpenAIApi(prompt);
    
    // 7. Atualizar o exame para refletir a an√°lise completa
    await storage.updateExam(examId, { 
      status: "analyzed" 
    });
    
    // 8. Criar um novo resultado com a an√°lise completa
    const analysisResult = await storage.createExamResult({
      examId: examId,
      summary: insightsResponse.contextualAnalysis?.substring(0, 150) + "...",
      detailedAnalysis: JSON.stringify(insightsResponse),
      recommendations: insightsResponse.recommendations?.join("\n"),
      healthMetrics: extractionResult.healthMetrics as any, // Mant√©m as m√©tricas da extra√ß√£o
      aiProvider: "openai:analysis"
    });
    
    // 9. Notificar o usu√°rio
    await storage.createNotification({
      userId,
      title: "An√°lise completa dispon√≠vel",
      message: `A an√°lise detalhada do exame "${exam?.name || 'sem nome'}" est√° pronta para visualiza√ß√£o`,
      read: false
    });
    
    return {
      exam,
      extractionResult,
      analysisResult,
      insights: insightsResponse
    };
    
  } catch (error: any) {
    // Em caso de falha, retornar um erro estruturado
    return {
      error: true,
      message: `Falha ao analisar o exame: ${error.message || 'Erro desconhecido'}`,
      details: String(error)
    };
  }
}

/**
 * Analisa um documento m√©dico usando exclusivamente a OpenAI
 * @param fileContent - Conte√∫do do arquivo codificado em Base64
 * @param fileType - Tipo do arquivo (pdf, jpeg, png)
 * @returns Resultado da an√°lise com m√©tricas de sa√∫de e recomenda√ß√µes
 */
export async function analyzeDocumentWithOpenAI(fileContent: string, fileType: string) {
  // Verificar se a API key est√° dispon√≠vel
  if (!process.env.OPENAI_API_KEY) {
    throw new Error("OpenAI API key not available");
  }

  if (!openai) {
    throw new Error("OpenAI client not initialized");
  }

  const truncateBase64 = (content: string) => {
    const MAX_LENGTH = 6_000_000; // ~6MB em base64
    return content.length > MAX_LENGTH ? content.substring(0, MAX_LENGTH) : content;
  };

  const stripMarkdownCodeFence = (raw: string | undefined) => {
    if (!raw) return "";
    let cleaned = raw.trim();

    if (cleaned.startsWith("```")) {
      const firstNewline = cleaned.indexOf("\n");
      if (firstNewline !== -1) {
        cleaned = cleaned.slice(firstNewline + 1);
      } else {
        cleaned = cleaned.replace(/^```[\w-]*\s*/i, "");
      }

      if (cleaned.endsWith("```")) {
        cleaned = cleaned.slice(0, -3);
      }

      cleaned = cleaned.trim();
    }

    return cleaned;
  };

  const extractJsonPayload = (raw: string) => {
    const firstBrace = raw.indexOf("{");
    if (firstBrace === -1) {
      return null;
    }

    let depth = 0;
    let inString = false;
    let prevChar = "";

    for (let i = firstBrace; i < raw.length; i++) {
      const char = raw[i];

      if (char === "\"" && prevChar !== "\\") {
        inString = !inString;
      }

      if (!inString) {
        if (char === "{") {
          depth += 1;
        } else if (char === "}") {
          depth -= 1;
          if (depth === 0) {
            return raw.slice(firstBrace, i + 1);
          }
        }
      }

      prevChar = char;
    }

    return null;
  };

  const extractResponseText = (response: any): string | undefined => {
    if (!response) return undefined;

    if (typeof response.output_text === "string" && response.output_text.trim()) {
      return response.output_text;
    }

    if (Array.isArray(response.output)) {
      for (const item of response.output) {
        if (item?.type === "output_text" && typeof item.text === "string") {
          return item.text;
        }

        if (item?.content && Array.isArray(item.content)) {
          for (const sub of item.content) {
            if (sub?.type === "output_text" && typeof sub.text === "string") {
              return sub.text;
            }
            if (typeof sub?.text === "string") {
              return sub.text;
            }
          }
        }
      }
    }

    // Fallback para o formato antigo de chat completions
    if (Array.isArray(response.choices)) {
      const choice = response.choices[0];
      if (choice?.message?.content) {
        if (typeof choice.message.content === "string") {
          return choice.message.content;
        }
        if (Array.isArray(choice.message.content)) {
          const textPart = choice.message.content.find((part: any) => part?.type === "text");
          if (textPart?.text) {
            return textPart.text;
          }
        }
      }
    }

    return undefined;
  };

  // Limitar o tamanho do conte√∫do para evitar exceder limites da API
  const originalBase64Length = fileContent.length;
  const truncatedContent = truncateBase64(fileContent);
  const wasTruncated = truncatedContent.length !== originalBase64Length;

  const mimeType =
    fileType === "jpeg" ? "image/jpeg" :
    fileType === "png" ? "image/png" :
    "application/pdf";

  const prompt = `Voc√™ √© um m√©dico especialista em an√°lise de exames laboratoriais e diagn√≥stico cl√≠nico.
                Sua an√°lise √© baseada em diretrizes m√©dicas atualizadas (2024) e evid√™ncias cient√≠ficas.
                
                ‚ö†Ô∏è ALERTA LEGAL OBRIGAT√ìRIO (MINIST√âRIO DA SA√öDE):
                üö´ √â CRIME mencionar: vitamina D, B12, C, zinco, magn√©sio, ferro, c√°lcio, √¥mega 3, QUALQUER nutriente espec√≠fico
                ‚úÖ APENAS use estas frases LITERAIS:
                - "Mantenha alimenta√ß√£o equilibrada conforme Guia Alimentar do Minist√©rio da Sa√∫de"
                - "Pratique atividade f√≠sica regular conforme orienta√ß√µes do Minist√©rio da Sa√∫de"
                - "Consulte um m√©dico para orienta√ß√µes espec√≠ficas"
                üö´ TOTALMENTE PROIBIDO: suplementos, vitaminas, minerais, exposi√ß√£o solar espec√≠fica
                üìã SIGA APENAS diretrizes do SUS
                
                Analise este exame ${fileType.toUpperCase()} e forne√ßa um relat√≥rio detalhado e baseado em evid√™ncias,
                incluindo achados cl√≠nicos relevantes, interpreta√ß√£o precisa dos valores, 
                correla√ß√µes entre par√¢metros, diretrizes cl√≠nicas aplic√°veis.
                
                Analise a imagem ou PDF do exame cuidadosamente e extraia todas as informa√ß√µes relevantes.
                Estabele√ßa par√¢metros de sa√∫de baseados em evid√™ncias cient√≠ficas recentes.
                Inclua cita√ß√µes de estudos ou diretrizes quando pertinente.
                
                Formate sua resposta como um JSON com a seguinte estrutura:
                {
                  "summary": "resumo geral dos resultados, em uma frase",
                  "detailedAnalysis": "an√°lise detalhada e fundamentada dos resultados encontrados",
                  "recommendations": ["APENAS orienta√ß√µes conforme Minist√©rio da Sa√∫de: alimenta√ß√£o equilibrada, atividade f√≠sica 150min/semana, consulte m√©dico para orienta√ß√µes espec√≠ficas"],
                  "healthMetrics": [
                    {
                      "name": "nome do par√¢metro, ex: hemoglobina",
                      "value": "valor num√©rico, ex: 14.2",
                      "unit": "unidade, ex: g/dL",
                      "status": "normal, aten√ß√£o, alto ou baixo",
                      "change": "+0.1 ou -0.2 comparado com o valor anterior",
                      "referenceRange": "intervalo de refer√™ncia considerado normal",
                      "evidenceLevel": "n√≠vel de evid√™ncia cient√≠fica (forte, moderada, preliminar)",
                      "clinicalSignificance": "significado cl√≠nico deste par√¢metro"
                    }
                  ],
                  "healthStatus": {
                    "overallScore": "pontua√ß√£o global de sa√∫de (0-100)",
                    "criticalParameters": ["par√¢metros que exigem aten√ß√£o imediata"],
                    "stableParameters": ["par√¢metros que est√£o em n√≠veis aceit√°veis"],
                    "clinicalGuidelines": ["diretrizes cl√≠nicas relevantes para os resultados"],
                    "differentialAnalysis": "an√°lise diferencial considerando os resultados",
                    "confidenceLevel": "n√≠vel de confian√ßa na an√°lise (alto, m√©dio, baixo)"
                  }
                }`;

  logger.info("[OpenAI] analyzeDocumentWithOpenAI start", {
    fileType,
    mimeType,
    originalBase64Length,
    truncatedLength: truncatedContent.length,
    wasTruncated,
    model: OPENAI_MODEL,
    fallbackModel: OPENAI_FALLBACK_MODEL
  });

  let uploadedFileId: string | null = null;

  try {
    const contentParts: any[] = [
      { type: "input_text", text: prompt }
    ];

    if (fileType === "pdf") {
      if (typeof File === "undefined") {
        throw new Error("File constructor not available. Update to Node.js 18+ or provide a compatible implementation.");
      }

      const pdfBuffer = Buffer.from(fileContent, "base64");
      const uploadedFile = await openai.files.create({
        file: new File([pdfBuffer], `exam-${Date.now()}.pdf`, { type: "application/pdf" }),
        purpose: "assistants"
      });
      uploadedFileId = uploadedFile.id;
      contentParts.push({ type: "input_file", file_id: uploadedFile.id });
    } else {
      contentParts.push({
        type: "input_image",
        image_url: `data:${mimeType};base64,${truncatedContent}`,
        detail: "auto"
      });
    }

    const response = await openai.responses.create({
      model: OPENAI_MODEL,
      input: [
        {
          role: "user",
          content: contentParts
        }
      ],
      temperature: 0.2,
      max_output_tokens: OPENAI_MAX_OUTPUT_TOKENS
    });

    if (response.status === "incomplete") {
      const reason = response.incomplete_details?.reason || "unknown";
      throw new Error(`OpenAI response incomplete (${reason}).`);
    }

    const content = extractResponseText(response);
    const sanitizedContent = stripMarkdownCodeFence(content);
    if (!sanitizedContent) {
      throw new Error("Empty response from GPT-5");
    }

    const jsonPayload = extractJsonPayload(sanitizedContent);
    if (!jsonPayload) {
      throw new Error("GPT-5 response did not contain a valid JSON object");
    }

    let analysisData;
    try {
      analysisData = JSON.parse(jsonPayload);
    } catch (parseError) {
      logger.warn("[OpenAI] Falha ao converter resposta em JSON", {
        message: parseError instanceof Error ? parseError.message : String(parseError)
      });
      throw parseError;
    }
    if (!analysisData.healthMetrics || !Array.isArray(analysisData.healthMetrics) || analysisData.healthMetrics.length === 0) {
      throw new Error("Invalid health metrics in GPT-5 response");
    }

    logger.info("[OpenAI] an√°lise conclu√≠da (responses API)", {
      fileType,
      healthMetricsCount: analysisData.healthMetrics.length,
      hasSummary: Boolean(analysisData.summary)
    });

    return {
      ...analysisData,
      aiProvider: analysisData.aiProvider ?? "openai:gpt5"
    };
  } catch (primaryError) {
    logger.warn("[OpenAI] falha na Responses API, tentando fallback", {
      fileType,
      message: primaryError instanceof Error ? primaryError.message : primaryError,
      stack: primaryError instanceof Error ? primaryError.stack : undefined
    });

    if (fileType === "pdf") {
      throw primaryError instanceof Error ? primaryError : new Error("Falha ao analisar documento");
    }

    // Fallback para modelos legados caso a API de Responses n√£o esteja dispon√≠vel
    const fallbackResponse = await openai.chat.completions.create({
      model: OPENAI_FALLBACK_MODEL,
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            { type: "image_url", image_url: { url: `data:${mimeType};base64,${truncatedContent}` } }
          ]
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.2,
      max_tokens: OPENAI_MAX_OUTPUT_TOKENS
    });

    const fallbackContent = extractResponseText(fallbackResponse);
    const sanitizedFallbackContent = stripMarkdownCodeFence(fallbackContent);
    if (!sanitizedFallbackContent) {
      logger.error("[OpenAI] Fallback retornou conte√∫do vazio", {
        fileType,
        originalError: primaryError instanceof Error ? primaryError.message : primaryError
      });
      throw primaryError instanceof Error ? primaryError : new Error("Falha ao analisar documento");
    }

    const fallbackJsonPayload = extractJsonPayload(sanitizedFallbackContent);
    if (!fallbackJsonPayload) {
      throw primaryError instanceof Error ? primaryError : new Error("Falha ao analisar documento");
    }

    let fallbackData;
    try {
      fallbackData = JSON.parse(fallbackJsonPayload);
    } catch (parseError) {
      logger.error("[OpenAI] Fallback retornou JSON inv√°lido", {
        fileType,
        message: parseError instanceof Error ? parseError.message : parseError,
        originalError: primaryError instanceof Error ? primaryError.message : primaryError
      });
      throw primaryError instanceof Error ? primaryError : new Error("Falha ao analisar documento");
    }
    if (!fallbackData.healthMetrics || !Array.isArray(fallbackData.healthMetrics) || fallbackData.healthMetrics.length === 0) {
      logger.error("[OpenAI] Fallback retornou m√©tricas inv√°lidas", {
        fileType,
        originalError: primaryError instanceof Error ? primaryError.message : primaryError
      });
      throw primaryError instanceof Error ? primaryError : new Error("Falha ao analisar documento");
    }
    logger.info("[OpenAI] an√°lise conclu√≠da (fallback chat completions)", {
      fileType,
      healthMetricsCount: fallbackData.healthMetrics.length,
      hasSummary: Boolean(fallbackData.summary)
    });

    return {
      ...fallbackData,
      aiProvider: fallbackData.aiProvider ?? "openai:gpt5:fallback"
    };
  } finally {
    if (uploadedFileId) {
      try {
        await openai.files.del(uploadedFileId);
      } catch (cleanupError) {
        logger.warn("[OpenAI] Falha ao remover arquivo tempor√°rio", {
          fileType,
          fileId: uploadedFileId,
          message: cleanupError instanceof Error ? cleanupError.message : cleanupError
        });
      }
    }
  }
}

// Interface espec√≠fica para o usu√°rio requerido na fun√ß√£o
interface UserInfo {
  id: number;
  username: string; 
  fullName?: string | null;
  email?: string | null;
  birthDate?: string | null;
  gender?: string | null;
  phoneNumber?: string | null;
  address?: string | null;
  password?: string;
  createdAt?: Date;
}

export async function generateChronologicalReport(examResults: ExamResult[], user: UserInfo) {
  try {
    
    // Prepara informa√ß√µes do paciente para contextualiza√ß√£o
    const patientInfo = `
      Dados do paciente:
      - Nome: ${user.fullName || 'N√£o informado'}
      - Sexo: ${user.gender || 'N√£o informado'}
      - Data de nascimento: ${user.birthDate ? new Date(user.birthDate).toLocaleDateString('pt-BR') : 'N√£o informada'}
      - Email: ${user.email || 'N√£o informado'}
      - Telefone: ${user.phoneNumber || 'N√£o informado'}
      - Endere√ßo: ${user.address || 'N√£o informado'}
    `;
    
    // Prepara informa√ß√µes dos exames em ordem cronol√≥gica
    const examsInfo = examResults.map((result, index) => {
      // Usamos analysisDate diretamente, que √© uma propriedade garantida pelo modelo
      const examDate = result.analysisDate || new Date();
      
      return `
        Exame #${index + 1} - Data: ${new Date(examDate).toLocaleDateString('pt-BR')}
        ID: ${result.id}
        Resumo: ${result.summary}
        An√°lise detalhada: ${result.detailedAnalysis}
        Recomenda√ß√µes: ${result.recommendations}
        M√©tricas principais: ${JSON.stringify(result.healthMetrics)}
      `;
    }).join('\n\n');
    
    // Prompt aprimorado para a OpenAI focado em an√°lise baseada em evid√™ncias
    const prompt = `
      Voc√™ √© um m√©dico especialista em an√°lise de tend√™ncias de sa√∫de e hist√≥rico m√©dico.
      Sua an√°lise √© baseada em diretrizes cl√≠nicas atualizadas (2024) e evid√™ncias cient√≠ficas s√≥lidas.
      
      ${patientInfo}
      
      Analise os seguintes exames em ordem cronol√≥gica:
      
      ${examsInfo}
      
      Crie um relat√≥rio cronol√≥gico contextual detalhado e baseado em evid√™ncias que inclua:
      1. Uma an√°lise abrangente da evolu√ß√£o dos principais indicadores de sa√∫de ao longo do tempo
      2. Identifica√ß√£o precisa de tend√™ncias (melhoria, piora ou estabilidade) com signific√¢ncia cl√≠nica
      3. Correla√ß√µes entre diferentes m√©tricas de sa√∫de com base na literatura m√©dica atual
      4. Avalia√ß√£o da efic√°cia das interven√ß√µes recomendadas anteriormente considerando diretrizes cl√≠nicas
      5. Recomenda√ß√µes futuras baseadas na evolu√ß√£o hist√≥rica e evid√™ncias cient√≠ficas atualizadas
      6. Par√¢metros de sa√∫de baseados em evid√™ncias e sua evolu√ß√£o ao longo do tempo
      7. Cita√ß√µes de estudos cient√≠ficos relevantes ou diretrizes cl√≠nicas aplic√°veis aos achados
      
      Responda em formato JSON com as seguintes propriedades:
      1. summary: resumo geral da evolu√ß√£o do paciente
      2. trends: array de tend√™ncias identificadas nos principais indicadores, incluindo signific√¢ncia cl√≠nica e n√≠vel de evid√™ncia
      3. correlations: array de correla√ß√µes identificadas entre diferentes m√©tricas, com suporte na literatura m√©dica
      4. effectivenessAnalysis: an√°lise da efic√°cia das interven√ß√µes anteriores baseada em evid√™ncias
      5. futureRecommendations: array de recomenda√ß√µes futuras fundamentadas em diretrizes cl√≠nicas atualizadas
      6. overallAssessment: avalia√ß√£o geral e contextualizada da sa√∫de do paciente
      7. healthParameters: {
          healthScore: pontua√ß√£o global de sa√∫de (0-100),
          criticalAreas: √°reas que precisam de aten√ß√£o imediata,
          stableAreas: √°reas com par√¢metros est√°veis ou saud√°veis,
          improvementTrends: tend√™ncias de melhoria identificadas,
          worseningTrends: tend√™ncias de piora identificadas
       }
      8. evidenceBasedAssessment: {
          clinicalGuidelines: diretrizes cl√≠nicas relevantes para os achados,
          studyReferences: refer√™ncias de estudos aplic√°veis,
          confidenceLevel: n√≠vel de confian√ßa na avalia√ß√£o (alto, m√©dio, baixo)
       }
    `;
    
    // Verifica se a API key est√° dispon√≠vel
    if (!process.env.OPENAI_API_KEY) {
      return getFallbackChronologicalReport(examResults, user);
    }
    
    try {
      if (!openai) {
        throw new Error("OpenAI client not initialized");
      }
      
      // Chama a API da OpenAI
      const response = await openai.chat.completions.create({
        model: OPENAI_MODEL,
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        temperature: 0.2,
        max_tokens: OPENAI_MAX_OUTPUT_TOKENS
      });
      
      const content = response.choices[0].message.content;
      if (!content) {
        throw new Error("Empty response from OpenAI API");
      }
      
      return JSON.parse(content);
    } catch (apiError) {
      return getFallbackChronologicalReport(examResults, user);
    }
  } catch (error) {
    throw new Error("Falha ao gerar relat√≥rio cronol√≥gico com OpenAI");
  }
}

/**
 * Resposta de fallback para o relat√≥rio cronol√≥gico quando a API da OpenAI n√£o est√° dispon√≠vel
 */
function getFallbackChronologicalReport(examResults: ExamResult[], user: UserInfo) {
  
  // Calcula algumas tend√™ncias b√°sicas baseadas nos dados dispon√≠veis
  let hasTrendData = examResults.length > 1;
  let trendsDirection = "est√°vel";
  
  if (hasTrendData) {
    // Tenta identificar alguma tend√™ncia simples olhando para o primeiro e √∫ltimo exame
    const firstExam = examResults[0];
    const lastExam = examResults[examResults.length - 1];
    
    // Verificar se healthMetrics est√° dispon√≠vel e √© um array
    const firstMetrics = Array.isArray(firstExam.healthMetrics) ? firstExam.healthMetrics : [];
    const lastMetrics = Array.isArray(lastExam.healthMetrics) ? lastExam.healthMetrics : [];
    
    if (firstMetrics.length > 0 && lastMetrics.length > 0) {
      // Conta melhorias e pioras em m√©tricas comuns
      let improvements = 0;
      let declines = 0;
      
      // An√°lise simplificada das m√©tricas
      firstMetrics.forEach((firstMetric: any) => {
        const matchingLastMetric = lastMetrics.find((m: any) => m.name === firstMetric.name);
        if (matchingLastMetric) {
          const firstStatus = firstMetric.status;
          const lastStatus = matchingLastMetric.status;
          
          if (firstStatus === 'alto' || firstStatus === 'baixo') {
            if (lastStatus === 'normal') {
              improvements++;
            }
          } else if (firstStatus === 'normal') {
            if (lastStatus === 'alto' || lastStatus === 'baixo') {
              declines++;
            }
          }
        }
      });
      
      if (improvements > declines) {
        trendsDirection = "melhora";
      } else if (declines > improvements) {
        trendsDirection = "piora";
      }
    }
  }
  
  // Retorna uma resposta de fallback estruturada conforme o novo formato
  return {
    summary: `An√°lise de ${examResults.length} exame(s) realizados pelo paciente ${user.fullName || 'sem nome'}, mostrando tend√™ncia de ${trendsDirection} em seus indicadores de sa√∫de.`,
    trends: [
      "Tend√™ncia de estabilidade nos indicadores metab√≥licos (signific√¢ncia cl√≠nica moderada, evid√™ncia preliminar)",
      "N√£o foi poss√≠vel identificar tend√™ncias detalhadas sem acesso √† API da OpenAI",
      "Recomenda-se revis√£o manual dos exames por um profissional de sa√∫de"
    ],
    correlations: [
      "Correla√ß√£o entre estado nutricional e n√≠veis de hemoglobina (suportado por dados na literatura)",
      "Poss√≠vel rela√ß√£o entre perfil lip√≠dico e marcadores inflamat√≥rios (requer confirma√ß√£o)",
      "An√°lise de correla√ß√µes completa n√£o dispon√≠vel no momento"
    ],
    effectivenessAnalysis: "N√£o √© poss√≠vel determinar a efic√°cia das interven√ß√µes anteriores sem processamento detalhado dos dados. Recomenda-se avalia√ß√£o m√©dica individualizada.",
    futureRecommendations: [
      "Continue realizando exames peri√≥dicos para monitoramento conforme diretrizes da Associa√ß√£o M√©dica Brasileira",
      "Consulte um m√©dico para an√°lise detalhada dos resultados e orienta√ß√£o personalizada",
      "Mantenha um estilo de vida saud√°vel com alimenta√ß√£o equilibrada e atividade f√≠sica regular (150 min/semana)",
      "Considere a realiza√ß√£o de exames de acompanhamento espec√≠ficos baseados nos resultados anteriores"
    ],
    overallAssessment: `Com base nos dados dispon√≠veis, o estado de sa√∫de geral parece ${trendsDirection}. As m√©tricas avaliadas sugerem a necessidade de acompanhamento m√©dico regular e ado√ß√£o de medidas preventivas.`,
    
    // Novos campos adicionados conforme a estrutura atualizada
    healthParameters: {
      healthScore: hasTrendData && trendsDirection === "melhora" ? 75 : hasTrendData && trendsDirection === "piora" ? 60 : 70,
      criticalAreas: ["Avalia√ß√£o de marcadores metab√≥licos", "N√≠veis hormonais", "Fun√ß√£o renal"],
      stableAreas: ["Hemograma b√°sico", "Enzimas hep√°ticas"],
      improvementTrends: hasTrendData && trendsDirection === "melhora" ? ["Perfil lip√≠dico", "Glicemia em jejum"] : [],
      worseningTrends: hasTrendData && trendsDirection === "piora" ? ["Marcadores inflamat√≥rios", "Perfil lip√≠dico"] : []
    },
    evidenceBasedAssessment: {
      clinicalGuidelines: [
        "Sociedade Brasileira de Endocrinologia - Diretrizes para manejo de altera√ß√µes metab√≥licas (2024)",
        "American Heart Association - Guidelines for Cardiovascular Health Monitoring (2023)",
        "Sociedade Brasileira de An√°lises Cl√≠nicas - Protocolo de interpreta√ß√£o laboratorial (2024)"
      ],
      studyReferences: [
        "Brazilian Journal of Medical and Biological Research - Interpreta√ß√£o de exames laboratoriais no contexto cl√≠nico (2023)",
        "Journal of American Medical Association - Longitudinal Assessment of Laboratory Parameters (2024)"
      ],
      confidenceLevel: "m√©dio"
    }
  };
}
